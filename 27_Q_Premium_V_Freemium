Problem Statement: 
------------------
Find the total number of downloads for paying and non-paying users by date. Include only records where non-paying customers have more downloads than paying customers. The output should be sorted by earliest date first and contain 3 columns date, non-paying downloads, paying downloads. Hint: In Oracle you should use "date" when referring to date column (reserved keyword).

DataFrames: ms_user_dimension, ms_acc_dimension, ms_download_facts
Expected Output Type: pandas.DataFrame

Sample Data: 
------------
user_dimension: 
    user_id  acc_id
0        1     716
1        2     749
2        3     713
3        4     744
4        5     726

acc_dimension: 
    acc_id 	paying_customer
0     700              no
1     701              no
2     702              no
3     703              no
4     704              no

downlaod_fact: 
  date  	user_id  downloads
0 2020-08-24        1          6
1 2020-08-22        2          6
2 2020-08-18        3          2
3 2020-08-24        4          4
4 2020-08-19        5          7 


-------------------

Python Query:
-------------
# Import your libraries
import pandas as pd

# Start writing code
# print("user_dimension: \n", ms_user_dimension.head())
# print("acc_dimension: \n", ms_acc_dimension.head())
# print("downlaod_fact: \n", ms_download_facts.head(), "\n")

ms_user_dimension.acc_id.nunique() # 42
ms_user_dimension.user_id.nunique() # 100
ms_acc_dimension.acc_id.nunique() # 51
# user_dimension with acc_dimension on acc_id to get paying and non-paying customers
ms_acc_dimension.paying_customer.unique()

# user_acc = pd.merge(ms_user_dimension, ms_acc_dimension, how = 'inner', on = ['acc_id'])
user_acc = pd.merge(ms_user_dimension, ms_acc_dimension, how = 'outer', on = ['acc_id']).sort_values(by = 'acc_id').dropna(axis = 0)


# Make a dataframe that just has downloads from non-paying users
user_acc_np = user_acc[user_acc['paying_customer'] == 'no']['user_id'].unique()
np_downloads = ms_download_facts[ms_download_facts['user_id'].isin(user_acc_np)].sort_values(by = ['date'])

# group the above on date and count number of downloads for that date
np_downloads = np_downloads.groupby('date').agg({'downloads':'sum'}).reset_index()

user_acc_p = user_acc[user_acc['paying_customer'] == 'yes']['user_id'].unique()
p_downloads = ms_download_facts[ms_download_facts['user_id'].isin(user_acc_p)].sort_values(by = ['date'])


# group the above on date and count number of downloads for that date
p_downloads = p_downloads.groupby('date').agg({'downloads':'sum'}).reset_index()

# Merge the two downloads on date
downloads_all = pd.merge(np_downloads, p_downloads, how = 'inner', on = 'date', suffixes = ('_not_paid','_paid'))

downloads_all.head()


download_np_more = downloads_all[downloads_all.apply(lambda x: x['downloads_not_paid'] > x['downloads_paid'], axis = 1)][['date','downloads_not_paid', 'downloads_paid']].sort_values(by = 'date')

--------------------------------

Python Learnings:
---------------
- Solved the first hard
- Approach was right, order of executtion was not
- Should have grouped the paying and non-paying dfs on date first before joining the two, doing the latter caused duplication
- Outer join
- dropna(axis = 0, how = {'any, all'}), any is defualt. axis = 0 means index/rows. axis = 1 is for columns

---------------------

SQL Learnings: 
--------------
select * from ms_user_dimension limit 5;
select * from ms_acc_dimension limit 5;
select * from ms_download_facts limit 5;



with user_class AS (
    SELECT user_id, paying_customer 
    FROM ms_user_dimension user_dim
    LEFT OUTER JOIN
    ms_acc_dimension acc
    ON user_dim.acc_id = acc.acc_id
    ORDER BY user_id
    ),
    np_downloads AS (
    SELECT date, SUM(downloads) AS "daily_downloads"
    FROM ms_download_facts
    WHERE user_id IN (SELECT user_id FROM user_class WHERE paying_customer = 'no')
    GROUP BY 1
    ORDER BY 1), 
    p_downloads AS (
    SELECT date, SUM(downloads) AS "daily_downloads"
    FROM ms_download_facts
    WHERE user_id IN (SELECT user_id FROM user_class WHERE paying_customer = 'yes')
    GROUP BY 1
    ORDER BY 1)
SELECT * FROM 
np_downloads 
INNER JOIN 
p_downloads 
USING(date)
WHERE np_downloads.daily_downloads > p_downloads.daily_downloads
ORDER BY date
--------------------------

SQL Learnings
-------------
- LEFT OUTER join
- Subquery in WHERE using IN
- WHERE col > col2 (without explicitly calculating their difference)
- multiple CTEs, using one within another



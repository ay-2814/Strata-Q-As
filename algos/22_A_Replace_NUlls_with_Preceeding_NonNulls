Problem Statement:
-------------------
Given a list of values containing NULLs, for every null value, replace it with its preceding non-null value.

Constraints
The input variable lst is a list.
The elements of lst can be either integers or None.
The length of lst can be any positive integer.
The list lst may contain multiple consecutive None values.
The list lst may start with a None value.
The list lst may end with a None value.


Solution:
----------
def replace_null_values(lst):
    """ 
    :type lst: List[Union[int, None]]
    :rtype: List[Union[int, None]]
    """
    res = [] #  No need to use a second list. Swapping to happen in list
    for i in range(1,len(lst)):
        if lst[i] is None:
            lst[i] = lst[i-1]
            
    return lst
            

Learnings:
----------
- None is a type in Python
- to check None: if lst[i] is None
- Swapping can happen in list instead of needing a new one
- In fact in this case, in list serves the purpose while new list does not because we still need context of the previous element and don't want to start anew with a different list
- Starting with 1 because if the 0th elemnent is None, we let it stay None

Problem Statement: 
------------------
Given a positive integer k, find all possible moving windows (starting and ending points) of values [1, 2, 3, ..., k] whose sum would add up to k.

Constraints:
--------------
The input variable k is a positive integer.

Test Case #1:
-------------
Input: 9
Output: [[2, 4], [4, 5]]
Description: This test case examines the functionâ€™s ability to handle a small input, where multiple moving windows should sum up to k.

Test Case #2:
-------------
Input: 15
Output: [[1, 5], [4, 6], [7, 8]]
Description: This case tests the function with an intermediate value of k, where multiple non-overlapping windows should be identified.

Solution in Python:
--------------------
def find_window_sum(k):
    """
    :type k: int
    :rtype: List[Tuple[int, int]]
    """
    # print(type(k))
    # print(k)
    if k < 0:
        return None
    
    window_list = []
    
    for i in range(1, k//2 + 1):
        
        # print("\nValue of i in first loop: ", i)
        
        start = end = window_sum = i
        
        while window_sum < k:
            i+= 1
            # print("i inside WHILE loop after incrementing: ",i)
            window_sum += i
            # print("current value of window_sum = ", window_sum)
            if window_sum == k:
                # print("condition of window_sum == k reached")
                end = i
                # print("end value in loop: ", end)
                window_list.append((start,end))
                # print(start, end, window_sum)
                break
    
    return window_list

---------------------------------------------------------------------

Learnings:
-----------
- Adding a tuple in a list by list.append((value1, value2))
- Time Complexity discussion: 
- The first loop runs from 1 till k//2 +1, but grows proportional to n so its O(n)
- The inner loop runs till the sum is <n, its also grows proprotionally by n 
- So overall its O(n^2)
- ChatGPT says the inner while loop terminates much sooner as k increases, hence it can be ignored? 

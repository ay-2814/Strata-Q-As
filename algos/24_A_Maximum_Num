Problem:
--------
Write a function that takes an array of integers and returns the maximum sum of any contiguous subarray. The subarray must contain at least one element.


"Contiguous" means the subarray consists of elements that are next to each other in the original array (i.e., they appear sequentially without gaps).

Solution:
----------
def max_subarray_sum(nums):
    """ 
    :type nums: List[int] 
    :rtype: int 
    """
    
    num_list = nums['nums']
    print(num_list)
    
    start = end = s = 0
    curr_sum = max_sum = num_list[0]
    
    for i in range(1, len(num_list)):
        if num_list[i] > curr_sum + num_list[i]:
            s = i 
            curr_sum = num_list[i]
            
        else:
            curr_sum += num_list[i]
        
        if curr_sum > max_sum:
            max_sum = curr_sum
            start = s
            end = i
    return max_sum

Learnings:
----------
- Can be solved with Kadenes algo
- Its a neat algo
